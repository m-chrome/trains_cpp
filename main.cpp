/*
 * Реализация алгоритма двунаправленной очереди в данной задаче
 *
 * Имеется поезд из N вагонов, пронумерованных по порядку, начиная с
 * 1. К поезду можно пристыковывать и отстыковывать вагоны спереди
 * и сзади. Новые вагоны, добавляемые к поезду, получают следующие
 * по порядку номера, после последнего использованного номера. Первая
 * строка входного файла содержит начальное число вагонов, а остальные
 * операции по перестыковке вагонов по одной на строку. Каждая
 * строка состоит из символа операции ’+’ (пристыковка) или ’-’
 * (отстыковка), символа направления ’>’ (спереди) или ’<’ (сзади) и
 * числа вагонов, участвующих в операции. Вывести в выходной файл
 * состояния состава в начале и после каждой операции над ним в виде
 * строки номеров вагонов по порядку от начала через пробел.
 *
 * Пример входного файла:
 *
 * 3
 * +>2
 * -<1
 * +>3
 * -<2
 * +<2
 * +>1
 * +>2
 * -<4
 *
 * Требуемый выходной файл для приведённого выше входного файла:
 *
 * 1 2 3
 * 5 4 1 2 3
 * 5 4 1 2
 * 8 7 6 5 4 1 2
 * 8 7 6 5 4
 * 8 7 6 5 4 9 10
 * 11 8 7 6 5 4 9 10
 * 13 12 11 8 7 6 5 4 9 10
 * 13 12 11 8 7 6
 */


#include <cstdio>
#include <cstdlib>
#include <cstdbool>
#include <cstring>

#include "deque.hpp"
#include "utilities.hpp"

using namespace std;        //Использование стандартного пространства имен
using namespace deque;      //Использование пространства имен класса дек
using namespace utilities;  //Использование пространства имен утилит

int main(int argc, char* argv[])
{
    char op, dir;           //op - операция (+/-), dir - направление (</>)
    size_t num;             //Число вагонов для операции (целое)

    if (argc!=3)             //Проверка на аргументы
    {
        printf("There is a wrong number of arguments!");
        return 1;
    }

    FILE* input=fopen(argv[1], "r");
    //Файлопроверка
    if (CheckFile(input)==false)
    {
        return 1;
    }

    FILE* output=fopen(argv[2], "w");
    //Файлопроверка
    if (CheckFile(output)==false)
    {
        fclose(input);
        return 1;
    }

    fscanf(input,"%u", &num);
    //Считывание первого числа вагонов

    Deque d;
    //Инициализация объекта d класса Deque
    //Конструктор инициализирует начальные данные нового объекта класса

    d.PushBack(num);
    //Заполнение массива вагонов первый раз

    d.PrintResult(output);
    //Вывод данных в консоль и файл

    while (fscanf(input, " %c%c%u", &op, &dir, &num)==3)
    {
        if (op=='+')
        //Ветка прицепления вагонов к составу
        {
            if(dir=='>')
            //Прицепить вагоны спереди
            {
                d.PushFront(num);
            }
            else if (dir=='<')
            //Прицепить вагоны сзади
            {
                d.PushBack(num);
            }
        }
        else if (op == '-')
        //Ветка отцепления вагонов от состава
        {
            if(dir == '<')
            //Удалить вагоны с конца
            {
                if (d.PopBack(num)==false)
                {
                    printf("Fatal operation:\nYou have negative number of wagons!");
                    return 1;
                }
            }
            else if (dir == '>')
            //Удалить вагоны с начала
            {
                if (d.PopFront(num)==false)
                {
                    printf("Fatal operation:\nYou have negative number of wagons!");
                    return 1;
                }
            }
        }
        d.PrintResult(output);
        //Вывод в файловый поток output и в консоль
    }
    fclose(input);
    fclose(output);
    return 0;
    //Программа вызывает деструктор
}
